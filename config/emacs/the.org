#+PROPERTY: header-args :tangle yes
* The Heretic's Emacs
** Throat Clearing
*** Header
#+begin_src emacs-lisp
  ;;; the.el --- All the actual config
  ;; -*- lexical-binding: t -*-

  ;;; Commentary:
  ;; To see the outline of this file, run M-x outline-minor-mode and
  ;; then press C-c @ C-t. To also show the top-level functions and
  ;; variable declarations in each section, run M-x occur with the
  ;; following query: ^;;;;* \|^(

  ;;; Detect stale bytecode

  ;; If Emacs version changed, the bytecode is no longer valid and we
  ;; must recompile. Also, if the location of THE changed, our
  ;; dotfile-finding functions are defined incorrectly and we must
  ;; recompile.

  ;;; Code:
#+end_src
*** ~use-package~
#+begin_src emacs-lisp
  (eval-when-compile
    (require 'use-package))
  (setq use-package-always-defer t)
#+end_src
*** Convenience libraries
#+begin_src emacs-lisp
  (use-package dash :demand t)
  (use-package f :demand t)
  (use-package s :demand t)
#+end_src
*** UI Cleanup
No startup screen, no bars or icons, and some tweaks to make
[[https://github.com/koekeishiya/yabai][yabai]] happy.
#+begin_src emacs-lisp
  (setq inhibit-startup-screen t)
  (if (fboundp 'tool-bar-mode)   (tool-bar-mode   -1))
  (if (fboundp 'menu-bar-mode)   (menu-bar-mode   -1))
  (if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))

  (setq default-frame-alist '((font . "PragmataPro Liga-14")
                              ;;(fullscreen . fullboth)
                              ;;(undecorated . t)
                              (horizontal-scroll-bars)
                              (vertical-scroll-bars)))

  (when (featurep 'ns)
    (push '(ns-transparent-titlebar . t) default-frame-alist))

  (setq frame-inhibit-implied-resize t)
  (setq frame-resize-pixelwise t)
#+end_src

*** Pretty Ligatures
#+begin_src emacs-lisp
  (load (concat user-emacs-directory "pragmata"))
  (global-prettify-symbols-mode)
  (add-hook 'text-mode-hook 'prettify-hook)
  (add-hook 'prog-mode-hook 'prettify-hook)
#+end_src

** THE Utilities
*** Config Groups
#+begin_src emacs-lisp
  (defgroup the-hooks nil
    "Startup hooks for THE."
    :group 'the)

  (defgroup the nil
    "Customize your THE experience."
    :prefix "the-"
    :group 'emacs)
#+end_src
*** Hooks
#+begin_src emacs-lisp
  (defmacro the-defhook (name arglist hooks docstring &rest body)
    "Define a function called NAME and add it to a hook.
    ARGLIST is as in `defun'. HOOKS is a list of hooks to which to
    add the function, or just a single hook. DOCSTRING and BODY are
    as in `defun'."
    (declare (indent 2)
             (doc-string 4))
    (unless (listp hooks)
      (setq hooks (list hooks)))
    (dolist (hook hooks)
      (unless (string-match-p "-\\(hook\\|functions\\)$" (symbol-name hook))
        (error "Symbol `%S' is not a hook" hook)))
    (unless (stringp docstring)
      (error "The: no docstring provided for `the-defhook'"))
    (let ((hooks-str (format "`%S'" (car hooks))))
      (dolist (hook (cdr hooks))
        (setq hooks-str (format "%s\nand `%S'" hooks-str hook)))
      `(progn
         (defun ,name ,arglist
           ,(format "%s\n\nThis function is for use in %s."
                    docstring hooks-str)
           ,@body)
         (dolist (hook ',hooks)
           (add-hook hook ',name)))))

  (setq the--finalize-init-hook nil)

  (defcustom the-after-init-hook nil
    "Hook run after at the very end of init.
    For use with `the-local-on-hook' in init.local.el."
    :group 'the-hooks
    :type 'hook)

  (defvar the--hook-contents nil
    "Alist mapping local init hooks to lists of forms.
    This is used to embed local init hook code directly into the
    init-file at the appropriate places during byte-compilation,
    without breaking macro-expansion.")

  (setq the--hook-contents nil)
#+end_src
*** Operating System Detection
#+begin_src emacs-lisp
  (defmacro the-operating-system-p (os)
    "Return non-nil if OS corresponds to the current operating system.
    Allowable values for OS (not quoted) are `macOS', `osx',
    `windows', `linux', `unix'."
    (pcase os
      (`unix `(not (memq system-type '(ms-dos windows-nt cygwin))))
      ((or `macOS `osx) `(eq system-type 'darwin))
      (`linux `(not (memq system-type
                          '(darwin ms-dos windows-nt cygwin))))
      (`windows `(memq system-type '(ms-dos windows-nt cygwin)))))

  (defmacro the-with-operating-system (os &rest body)
    "If OS corresponds to the current operating system, eval and return BODY.
    If not, return nil.
    Allowable values for OS (not quoted) are `macOS', `osx',
    `windows', `linux', `unix'."
    (declare (indent 1))
    `(when (the-operating-system-p ,os)
       ,@body))
#+end_src
** Basics
*** Modeline Cleanup
[[https://github.com/raxod502/blackout][blackout]] is the best modeline hygiene tool I've seen so far.
#+begin_src emacs-lisp
  (use-package blackout
    :demand t)
#+end_src
*** Metadata Cleanup
Emacs and packages love to throw files all over the
place. [[https://github.com/emacscollective/no-littering][no-littering]] is a great tool for wrangling all the
junk. We also take their recommended settings for ~recentf~,
auto-saves, and customizations. We also disable backup files and
lockfiles because they're just noise.
#+begin_src emacs-lisp
  (use-package no-littering
    :demand t
    :config
    (require 'recentf)
    (add-to-list 'recentf-exclude no-littering-var-directory)
    (add-to-list 'recentf-exclude no-littering-etc-directory)

    (setq auto-save-file-name-transforms
          `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))
    (setq custom-file (no-littering-expand-etc-file-name "custom.el")))

  (setq make-backup-files nil)

  (setq create-lockfiles nil)
#+end_src
*** Correct Org
Emacs has an annoying habit of loading whatever the built-in
version of [[https://orgmode.org/][org-mode]] is, so we register our version of Org early
so anything which depends on Org won't get weird.
#+begin_src emacs-lisp
  (use-package org
    :ensure org-plus-contrib)
#+end_src
*** Theme
[[https://github.com/morhetz/gruvbox][Gruvbox]] is the best theme, I will not be taking questions. The
[[https://github.com/hlissner/emacs-doom-themes][doom-themes]] package has one of the nicer implementations, and
also does some extra work to improve Org's use of the theme.
#+begin_src emacs-lisp
  (use-package doom-themes
    :demand t
    :config
    (load-theme 'doom-gruvbox t)
    (require 'doom-themes-ext-org)
    (doom-themes-org-config))
#+end_src
*** TLS
Default [[https://www.gnutls.org/][GnuTLS]] settings in Emacs are /bad/.
#+begin_src emacs-lisp
  (use-package gnutls
    :ensure nil
    :init
    (setq gnutls-verify-error t
          gnutls-min-prime-bits 3072))
#+end_src
*** Keybindings
We use [[https://github.com/emacs-evil/evil][evil]] for a baseline, [[https://github.com/noctuid/general.el][general]] for customizations, and
[[https://github.com/justbur/emacs-which-key][which-key]] for discovery.
#+begin_src emacs-lisp
  (use-package which-key
    :demand t
    :commands which-key-mode
    :config
    (setq which-key-show-early-on-C-h t)
    (which-key-mode 1)
    :blackout t)

  (use-package evil
    :demand t
    :commands evil-mode
    :config
    (evil-mode 1))

  (use-package general
    :demand t)
#+end_src
*** Sanity
There are some weird defaults.
#+begin_src emacs-lisp
  (setq sentence-end-double-space nil)
  (setq-default indent-tabs-mode nil)
  (setq kill-do-not-save-duplicates t)
#+end_src
**** Utilities
Little macro to make binding mode-specific keys less of a chore.
#+begin_src emacs-lisp
  (defmacro the-bind-key (key-name command which-key &optional predicate)
    "Bind a key in `the-keymap'.
     KEY-NAME, COMMAND, and WHICH-KEY are as in `general-define-key'.
     PREDICATE is any additional args to `general-define-key'."
    `(general-define-key
      :keymaps 'the-keymap
      ,key-name ,command :wk ,which-key ,predicate))
#+end_src
** Candidate Selection
We use [[https://github.com/raxod502/selectrum][selectrum]] and [[https://github.com/raxod502/prescient.el][prescient]] for candidate selection
(anything that uses ~completing-read~) and intelligent sorting of
those candidates.
#+begin_src emacs-lisp
  (use-package selectrum
    :commands selectrum-mode
    :init
    (selectrum-mode +1))

  (use-package selectrum-prescient
    :demand t
    :after selectrum
    :commands prescient-persist-mode selectrum-prescient-mode
    :config
    (setq prescient-history-length 1000)
    (prescient-persist-mode +1)
    (selectrum-prescient-mode +1))
#+end_src
** Git
#+begin_src emacs-lisp
  (use-package magit)
#+end_src
** Buffers
*** Autorevert
I never want to be bitten by a buffer not reflecting the file on
disk.
#+begin_src emacs-lisp
  (setq auto-revert-verbose nil)
  (global-auto-revert-mode +1)
#+end_src
*** Saveplace
It's nice to come back to a file and not have to figure out what
you were doing.
#+begin_src emacs-lisp
  (save-place-mode +1)
#+end_src
*** Search
[[https://github.com/raxod502/ctrlf][ctrlf]] is a simple incremental search.
#+begin_src emacs-lisp

  (use-package ctrlf
    :demand t
    :config
    (ctrlf-mode +1))
#+end_src
*** Undo
I still don't really grok standard Emacs undo, so I use
[[http://www.dr-qubit.org/undo-tree.html][undo-tree]].
#+begin_src emacs-lisp
  (use-package undo-tree
    :demand t
    :config
    (global-undo-tree-mode +1)
    (setq undo-tree-enable-undo-in-region nil)
    :blackout t)
#+end_src
** Writing
*** Autofill
Save yourself from reflowing by hand. We also set auto-fill to
trigger on punctuation rather than only on whitespace.
#+begin_src emacs-lisp
  (mapc
   (lambda (c)
     (set-char-table-range auto-fill-chars c t))
   "!-=+]};:'\",.?")
  (add-hook 'text-mode-hook 'turn-on-auto-fill)
#+end_src
** Direnv
Making LSP (and other tools) work sanely is much easier with
[[https://direnv.net/][direnv]].
#+begin_src emacs-lisp
  (use-package direnv
    :demand t
    :config
    (direnv-mode))
#+end_src
** Completion
#+begin_src emacs-lisp
  (use-package company
    :demand t
    :config
    (setq company-idle-delay 0.1
          company-minimum-prefix-length 1
          company-tooltip-align-annotations t
          company-require-match 'never
          company-global-modes '(not erc-mode message-mode help-mode gud-mode)
          company-dabbrev-other-buffers nil
          company-dabbrev-ignore-case nil
          company-dabbrev-downcase nil)
    (require 'company-tng)
    (global-company-mode +1)
    (company-tng-mode +1)
    :blackout "Comp")

  (use-package company-prescient
    :demand t
    :after company
    :config
    ;; Use `prescient' for Company menus.
    (company-prescient-mode +1))
#+end_src
** Checking
*** Flycheck
#+begin_src emacs-lisp
  (use-package flycheck
    :demand t
    :config
    (global-flycheck-mode +1)
    :blackout t)
#+end_src
** Programming
*** Language Server Protocol
#+begin_src emacs-lisp
  (use-package lsp-mode
    :commands (lsp lsp-deferred)
    :hook
    (lsp-mode . lsp-enable-which-key-integration)
    (lsp-mode . lsp-lens-mode)
    :init
    (setq gc-cons-threshold 100000000)
    (setq read-process-output-max (* 1024 1024 10))
    (setq lsp-completion-provider :capf)
    (setq lsp-enable-snippet t)
    (setq lsp-enable-indentation t)
    (setq lsp-semantic-highlighting t)
    (setq lsp-auto-configure t)
    :blackout "LSP")

  (use-package lsp-ui
    :hook (lsp-mode . lsp-ui-mode))

  (use-package yasnippet)
#+end_src
*** Debug Adapter Protocol
#+begin_src emacs-lisp
  (use-package posframe)

  (use-package dap-mode
    :hook
    (lsp-mode . dap-mode)
    (lsp-mode . dap-ui-mode))
#+end_src
*** Languages
**** LaTeX
#+begin_src emacs-lisp
  (use-package tex
    :hook ((LaTeX-mode TeX-mode) . lsp-deferred)
    :ensure auctex
    :demand t)
#+end_src
**** Nix
#+begin_src emacs-lisp
  (use-package nix-mode
    :mode "\\.nix\\'")
#+end_src
**** Scala
#+begin_src emacs-lisp
  (use-package scala-mode
    :interpreter
    ("scala" . scala-mode)
    :hook (scala-mode . lsp))

  (use-package sbt-mode
    :commands sbt-start sbt-command
    :config
    ;; WORKAROUND: https://github.com/ensime/emacs-sbt-mode/issues/31
    ;; allows using SPACE when in the minibuffer
    (substitute-key-definition
     'minibuffer-complete-word
     'self-insert-command
     minibuffer-local-completion-map)
    ;; sbt-supershell kills sbt-mode:  https://github.com/hvesalai/emacs-sbt-mode/issues/152
    (setq sbt:program-options '("-Dsbt.supershell=false")))

  (use-package lsp-metals
    :init
    (setq lsp-metals-treeview-show-when-views-received t))
#+end_src
**** Haskell
#+begin_src emacs-lisp
  (use-package haskell-mode
    :mode (("\\.hs\\'"    . haskell-mode)
           ("\\.cabal\\'" . haskell-cabal-mode)
           ("\\.hcr\\'"   . haskell-core-mode))
    :hook (haskell-mode . lsp-deferred))

  (use-package lsp-haskell
    :init
    (setq lsp-haskell-server-path "haskell-language-server"))
#+end_src
**** Dhall
#+begin_src emacs-lisp
  (use-package dhall-mode
    :mode "\\.dhall\\'"
    :hook (dhall-mode . lsp))
#+end_src
**** YAML
#+begin_src emacs-lisp
  (use-package yaml-mode
    :mode (("\\.yml\\'" . yaml-mode)
           ("\\.yaml\\'" . yaml-mode))
    :hook (yaml-mode . lsp))
#+end_src
**** Terraform
#+begin_src emacs-lisp
  (use-package terraform-mode)
#+end_src
** Org and Zettelkasten
*** Neuron
#+begin_src emacs-lisp
  (use-package neuron-mode
    :init
    (setq neuron-default-zettelkasten-directory "~/src/corpus"))
#+end_src
*** Org
#+begin_src emacs-lisp
  (use-package org-bullets
    :hook (org-mode . org-bullets-mode))

  (use-package org
    :ensure org-plus-contrib
    :hook (org-mode . org-indent-mode)
    :init
    (setq org-todo-keywords
          '((sequence
             "BACKLOG(b!)"
             "TODO(t!)"
             "NEXT(n)"
             "IN-PROGRESS(i!)"
             "|"
             "DONE(d!)")
            (sequence
             "WAITING(w@/!)"
             "HOLD(h@/!)"
             "|"
             "CANCELED(c@)")
            (type
             "PHONE(p!)"
             "MEETING(m!)")))
    (setq org-todo-keyword-faces
          (quote (("TODO" :foreground "red" :weight bold)
                  ("NEXT" :foreground "blue" :weight bold)
                  ("IN-PROGRESS" :foreground "red" :weight bold)
                  ("DONE" :foreground "forest green" :weight bold)
                  ("WAITING" :foreground "orange" :weight bold)
                  ("HOLD" :foreground "magenta" :weight bold)
                  ("CANCELED" :foreground "forest green" :weight bold)
                  ("MEETING" :foreground "forest green" :weight bold)
                  ("PHONE" :foreground "forest green" :weight bold))))

    (setq org-todo-state-tags-triggers
          (quote (("CANCELED" ("CANCELED" . t))
                  ("WAITING" ("WAITING" . t))
                  ("HOLD" ("WAITING") ("HOLD" . t))
                  (done ("WAITING") ("HOLD"))
                  ("TODO" ("WAITING") ("CANCELLED") ("HOLD"))
                  ("NEXT" ("WAITING") ("CANCELLED") ("HOLD"))
                  ("DONE" ("WAITING") ("CANCELLED") ("HOLD")))))

    (setq org-use-fast-todo-selection t)
    (setq org-treat-S-cursor-todo-selection-as-state-change nil)
    (setq org-archive-location (f-expand "archive/%s::* Archived Tasks" org-directory))
    (setq org-insert-heading-respect-content t)
    (setq org-refile-use-outline-path t
          org-outline-path-complete-in-steps nil)
    (setq org-log-into-drawer t)
    (setq org-special-ctrl-a/e t
          org-special-ctrl-k t)
    (setq org-return-follows-link t)
    (setq org-tag-persistent-alist
          '((:startgroup . nil)
            ("@work" . ?w)
            ("@home" . ?h)
            ("@phone" . ?p)
            ("@mail" . ?m)
            (:endgroup . nil)
            ("ansible" . ?a)
            ("epic" . ?e)
            ("linux" . ?l)
            ("noexport" . ?n)
            ("crypt" . ?c)
            ))
    (setq org-directory "~/org")
    (setq org-capture-templates
          '(("t" "Todo" entry (file+headline "~/org/inbox.org" "Tasks")
             "* BACKLOG %?\n %T\n  %i\n  %a")
            ("m" "Meeting" entry (file+headline "~/org/work.org" "Meetings")
             "* MEETING with %? :MEETING:\n%U" :clock-in t :clock-resume t)
            ("p" "Phone call" entry (file+headline "~/org/work.org" "Phone Calls")
             "* PHONE %? :PHONE:\n%U" :clock-in t :clock-resume t)
            ("g" "Groceries" entry (file+headline "~/org/groceries.org" "Groceries")
             "* %?\nEntered on %U\n  %i")
            ("w" "Work" entry (file+headline "~/org/work.org" "Tasks")
             "* TODO %?\n %T\n %i\n %a")
            ("h" "Home" entry (file+headline "~/org/home.org" "Tasks")
             "* TODO %?\n %i")))

    (setq org-refile-targets
          '((org-agenda-files :maxlevel . 3)))

    (defun the-org-sort-ignore-errors ()
      (condition-case x
          (org-sort-entries nil ?a)
        (user-error)))

    (defun the-org-sort-buffer ()
      "Sort all entries in the Org buffer recursively in alphabetical order."
      (interactive)
      (org-map-entries #'the-org-sort-ignore-errors))

    (setq org-agenda-files '("~/org"))
    (setq org-agenda-skip-scheduled-if-done t
          org-agenda-skip-deadline-if-done t)
    :config
    (require 'org-tempo))
#+end_src
** Modeline
#+begin_src emacs-lisp
  (use-package doom-modeline
    :hook (window-setup . doom-modeline-mode)
    :init
    (setq doom-modeline-height 1)
    (set-face-attribute 'mode-line nil :family "PragmataPro Liga" :height 140)
    (set-face-attribute 'mode-line-inactive nil :family "PragmataPro Liga" :height 140))
#+end_src

** Closing
#+begin_src emacs-lisp
  (provide 'the)
  ;;; the.el ends here
#+end_src
